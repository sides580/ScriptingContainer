using System.IO;
using System.Xml;
using EnvDTE;
using EnvDTE100;
using EnvDTE80;
using TCatSysManagerLib;
using TwinCAT.SystemManager;
using System;
using ScriptingTest;
using System.Collections.Generic;

namespace Scripting.CSharp
{

    static class ReferenceCode
    {
        static public void ImportPOUFromList(DTE2 dte, ITcSysManager4 systemManager, ITcSmTreeItem devices, List<ImportPOU> List, IWorker worker)
        {
            if (List.Count > 1)
            {
                string failMessage = "";
                string importMessage = "";
                try
                {
                    ITcSmTreeItem PlcDevice = systemManager.LookupTreeItem("TIPC");
                    ITcSmTreeItem plcProject = PlcDevice.Child[1];
                    ITcProjectRoot projectRoot = (ITcProjectRoot)plcProject;
                    ITcSmTreeItem nestedProject = projectRoot.NestedProject;
                     //For what ever reason, it doesn't appear that I can point at a folder as a tree item even thought its a type.
                    /*string importFolderName = "AutoGeneratedCode";
                    if (!ReferenceCode.DoesFolderExist(nestedProject, importFolderName))
                        nestedProject.CreateChild (importFolderName, 601, "", true); //TREEITEMTYPE_PLCFOLDER

                    ITcSmTreeItem plcProject2 = GetPLCFolder(nestedProject, importFolderName);//plcProject.LookupChild(plcProject.Name + " Project^" + importFolderName);
                    nestedProject = plcProject2;*/
                    
                    //ITcSmTreeItem projectInstance = plcProject.get_Child(1);
                    ITcPlcIECProject importExport = (ITcPlcIECProject)nestedProject;
                    //string Directory = System.IO.Directory.GetCurrentDirectory();
                    foreach (ImportPOU import in List)
                    {
                        
                        importMessage = import.Source;
                        string[] importSkimmed = import.Source.Split('\\');
                        failMessage = "Step 5";
                        string importSkimmedFinal = importSkimmed[importSkimmed.GetUpperBound(0)].Split('.')[0];
                        failMessage = "Step 6";
                        if (!ReferenceCode.DoesNestedObjectExist(nestedProject, importSkimmedFinal))
                        {                          
                                importExport.PlcOpenImport(import.Source, (int)PLCIMPORTOPTIONS.PLCIMPORTOPTIONS_SKIP, "", true);
                        }
                        else
                        {
                            if (import.Option != null)
                            {
                                List<string> TempList = new List<string>(import.Option);
                                if (TempList.Exists(a => a.ToLower() == "overwrite") || TempList.Exists(a => a.ToLower() == "replace"))
                                    importExport.PlcOpenImport(import.Source, (int)PLCIMPORTOPTIONS.PLCIMPORTOPTIONS_REPLACE, "", true);
                            }
                        }
                        if (import.Option != null)
                        {
                            List<string> TempList = new List<string>(import.Option);
                            if (TempList.Exists(a => a.ToLower() == "addtodefaulttask"))
                            {
                                //ITcSmTreeItem plcProject2 = plcProject.LookupChild(plcProject.Name + " Project");
                                //ITcSmTreeItem pouMain = GetPLCPOU(nestedProject, "MAIN");
                                //ITcPlcTaskReference PLCTaskRef = (ITcPlcTaskReference)pouMain;
                                //string test = PLCTaskRef.LinkedTask;
                                for (int x = 1; x <= nestedProject.ChildCount; x++)
                                {

                                    if (nestedProject.Child[x].ItemType == 621) //type task
                                    {
                                        ITcSmTreeItem taskObject = nestedProject.Child[x];
                                        try
                                        {
                                            ITcSmTreeItem DoesThisAlreadyExist = taskObject.LookupChild(importSkimmedFinal);
                                        }
                                        catch
                                        {
                                            taskObject.CreateChild(importSkimmedFinal, 650, "", null);
                                        }
                                        //ITcSmTreeItem GetFirstChildAsTest = nestedProject.Child[x].Child[1];
                                        //XmlDocument xmlDoc = new XmlDocument();
                                        //xmlDoc.LoadXml(GetFirstChildAsTest.ProduceXml(false));

                                    }
                                }
                            }
                        }
                    }
                    dte.Solution.SolutionBuild.Build(true);
                }
                catch (Exception ex)
                {

                    worker.ProgressStatus = "Import POU and build project failed: " + ex.Message;
                    worker.ProgressStatus = "Import POU failed Supporting message: " + importMessage + ":::" + failMessage;
                    dte.Solution.SolutionBuild.Build(true);
                }
            }
        }
        static public bool DoesNestedObjectExist(ITcSmTreeItem nestedProject, string objectName)
        {
            for (int x = 1; x < nestedProject.ChildCount; x++)
            {
                ITcSmTreeItem Child = nestedProject.Child[x];
                if (nestedProject.Child[x].Name == objectName)
                {
                    return true;
                }
                else
                {
                    if (Child.ChildCount > 0)
                    {
                        bool IsNested = DoesNestedObjectExist(Child, objectName);
                        if (IsNested)
                            return true;
                    }
                }
            }
            return false;
        }
        static public bool DoesFolderExist(ITcSmTreeItem nestedProject, string objectName)
        {
            for (int x = 1; x < nestedProject.ChildCount; x++)
            {
                ITcSmTreeItem Child = nestedProject.Child[x];
                if (nestedProject.Child[x].Name == objectName && nestedProject.Child[x].ItemType == 601)
                {
                    return true;
                }
                /*else
                {
                    if (Child.ChildCount > 0)
                    {
                        bool IsNested = DoesNestedObjectExist(Child, objectName);
                        if (IsNested)
                            return true;
                    }
                }*/
            }
            return false;
        }
        static public ITcSmTreeItem GetPLCFolder(ITcSmTreeItem nestedProject, string objectName)
        {
            ITcSmTreeItem Child = nestedProject.Child[1];
            for (int x = 1; x < nestedProject.ChildCount; x++)
            {
                Child = nestedProject.Child[x];
                if (nestedProject.Child[x].Name == objectName && nestedProject.Child[x].ItemType == 601)
                {
                    return Child;
                }
                /*else
                {
                    if (Child.ChildCount > 0)
                    {
                        bool IsNested = DoesNestedObjectExist(Child, objectName);
                        if (IsNested)
                            return true;
                    }
                }*/
            }
            return Child;
        }
        static public ITcSmTreeItem GetPLCPOU(ITcSmTreeItem nestedProject, string objectName)
        {
            ITcSmTreeItem Child = nestedProject.Child[1];
            for (int x = 1; x < nestedProject.ChildCount; x++)
            {
                Child = nestedProject.Child[x];
                if (nestedProject.Child[x].Name == objectName && nestedProject.Child[x].ItemType == 602)
                {
                    return Child;
                }
                /*else
                {
                    if (Child.ChildCount > 0)
                    {
                        bool IsNested = DoesNestedObjectExist(Child, objectName);
                        if (IsNested)
                            return true;
                    }
                }*/
            }
            return Child;
        }


        static public void AddLibrarys(ITcSysManager4 systemManager, ITcSmTreeItem nestedProject, IWorker worker)
        {
            ITcSmTreeItem PlcDevice = systemManager.LookupTreeItem("TIPC");
            ITcSmTreeItem plcProject = PlcDevice.Child[1];
            ITcProjectRoot projectRoot = (ITcProjectRoot)plcProject;
            ITcSmTreeItem plcProject2 = plcProject.LookupChild(plcProject.Name + " Project");
            //ITcSmTreeItem nestedProject = projectRoot.NestedProject;

            ITcSmTreeItem referencesItem = plcProject2.LookupChild("References");
            ITcPlcLibraryManager libraryManager = (ITcPlcLibraryManager)referencesItem;
            //ITcPlcReferences libList = libraryManager.ScanLibraries();
            List<string> ListOfLibs = new List<string>();
            for(int x = 1; x<= referencesItem.ChildCount;x++)
            {
                ListOfLibs.Add(referencesItem.Child[x].Name);
            }

            //libraryManager.AddLibrary("Tc2_Standard","", "Beckhoff Automation GmbH");

            //libraryManager.AddLibrary("Tc2_Standard, 3.2.0.0 (Beckhoff Automation GmbH)");
            foreach (string lib in CSV_Reader.AddLibrary_List)
            {
                bool doeslibexist = ListOfLibs.Contains(lib);
                if(!doeslibexist)
                libraryManager.AddLibrary(lib,"", "Beckhoff Automation GmbH");
            }


        }
        static public void AutoRename(IWorker worker, ITcSmTreeItem Device)
        {
            foreach (string[] ReplaceWord in ScriptingTest.CSV_Reader.AutoRenameInEtherCATList)
                if (Device.Name.Contains(ReplaceWord[0]))
                {
                    Device.Name = Device.Name.Replace(ReplaceWord[0], ReplaceWord[1]);
                }
        }
        static public void AutoRename(IWorker worker, ITcSmTreeItem Device, List<string[]> AutoRenameList)
        {
            foreach (string[] ReplaceWord in AutoRenameList)
            {
                if (Device.Name.Contains(ReplaceWord[0]))
                {
                    Device.Name = Device.Name.Replace(ReplaceWord[0], ReplaceWord[1]);
                }
            }
        }
        static public void AutoRename(IWorker worker, IO_Object Device, List<string[]> AutoRenameList)
        {
            foreach (string[] ReplaceWord in AutoRenameList)
            {
                if (Device.TagName.Contains(ReplaceWord[0]))
                {
                    Device.TagName = Device.TagName.Replace(ReplaceWord[0], ReplaceWord[1]);
                }
            }
        }
        static public void GetIOObjectRecursive(IWorker worker, ITcSmTreeItem item, List<ReferenceCode.IO_Object> list, IO_ObjectSettings Parrent)
        {
            AutoRename(worker, item);
            if (Parrent.TerminalName == "")
            {
                Parrent.TerminalName = item.Name;
            }
            foreach (ITcSmTreeItem subitem in item)
            {
                int countChildren = 0;
                if (subitem.ItemType == 60)
                {   
                    foreach (ITcSmTreeItem ChildCount in subitem)
                    {
                        countChildren++;
                    }
                }
                if (subitem.ChildCount == 0 && countChildren == 0)
                {

                    if (subitem.ItemType == 7)
                    {
                        AutoRename(worker, subitem);
                        try
                        {
                            int gof = 0;
                            bool bitsizeDataExist = true;
                           
                            if (subitem.Name == "WcState")
                                gof++;
                            XmlDocument xmlDoc = new XmlDocument();
                            xmlDoc.LoadXml(subitem.ProduceXml(false));
                            if (xmlDoc.SelectSingleNode("TreeItem/VarDef/VarBitSize") == null)
                                bitsizeDataExist = false;
                            ReferenceCode.IO_Object NewItem = new ReferenceCode.IO_Object();

                            if (xmlDoc.SelectSingleNode("TreeItem/VarDef/VarInOut") != null && xmlDoc.SelectSingleNode("TreeItem/VarDef/VarInOut").InnerText == "1") //Is output
                            {
                                NewItem.IsOutput = true;
                                NewItem.IsInput = false;
                            }
                            else if(xmlDoc.SelectSingleNode("TreeItem/VarDef/VarInOut") != null && xmlDoc.SelectSingleNode("TreeItem/VarDef/VarInOut").InnerText == "0") //Is output
                            {
                                NewItem.IsOutput = false;
                                NewItem.IsInput = true;
                            }
                            else
                            {
                                NewItem.IsOutput = Parrent.IsOutput;
                                NewItem.IsInput = Parrent.IsInput;
                            }
                            NewItem.TerminalName = Parrent.TerminalName;
                            NewItem.PathName = subitem.PathName;
                            if (bitsizeDataExist)
                                NewItem.bitsize = Convert.ToInt32(xmlDoc.SelectSingleNode("TreeItem/VarDef/VarBitSize").InnerText);
                            NewItem.TagName = subitem.Name;
                            NewItem.item = subitem;
                            NewItem.TagParentName = subitem.Parent.Name;
                            NewItem.ItemSubType = Parrent.ItemSubType;
                            if (xmlDoc.SelectSingleNode("TreeItem/Comment") == null)
                                NewItem.Description = "";
                            else
                                NewItem.Description = xmlDoc.SelectSingleNode("TreeItem/Comment").InnerText;
                            //if(xmlDoc.SelectSingleNode("TreeItem/VarDef/VarType").InnerText)
                            if (xmlDoc.SelectSingleNode("TreeItem/VarDef/VarType") != null)
                                NewItem.typedetails = xmlDoc.SelectSingleNode("TreeItem/VarDef/VarType").InnerText;
                            else
                                NewItem.typedetails = "";

                            if (NewItem.typedetails == "BIT")
                                NewItem.type = 1;
                            //else if (NewItem.typedetails == "Byte")
                            //    NewItem.type = 2;//Byte is 2, but we can't use bytes because it messes up EIP L5X generator
                            else if (NewItem.typedetails == "WORD")//done sort of, 
                                NewItem.type = 5;
                            else if (NewItem.typedetails == "DWORD")
                                NewItem.type = 9;
                            //else if (NewItem.typedetails == "SINT")
                            //    NewItem.type = 2;
                            //else if (NewItem.typedetails == "USINT") // done
                            //    NewItem.type = 3;
                            else if (NewItem.typedetails == "INT" || NewItem.typedetails == "Byte" || NewItem.typedetails == "SINT")
                                NewItem.type = 4;
                            else if (NewItem.typedetails == "UINT" || NewItem.typedetails == "USINT")
                                NewItem.type = 5;
                            else if (NewItem.typedetails == "DINT") //Done
                                NewItem.type = 6;
                            else if (NewItem.typedetails == "UDINT")//Done
                                NewItem.type = 7;
                            else if (NewItem.typedetails == "REAL")
                                NewItem.type = 11;
                            else if (NewItem.typedetails == "LREAL")
                                NewItem.type = 12;
                            else if (NewItem.typedetails == "STRING")
                                NewItem.type = 13;
                            else if (NewItem.typedetails == "LINT") //Done
                                NewItem.type = 8;
                            else if (NewItem.typedetails == "BIT2") //Done
                                NewItem.type = 4;
                            else
                                NewItem.type = 4;
                            NewItem.IndexGroup = xmlDoc.SelectSingleNode("TreeItem/VarDef/AdsInfo/IndexGroup").InnerText;
                            NewItem.IndexOffset = xmlDoc.SelectSingleNode("TreeItem/VarDef/AdsInfo/IndexOffset").InnerText;
                            list.Add(NewItem);
                        }
                        catch (Exception ex)
                        {
                            worker.ProgressStatus = ex.Message;
                        }

                    }
                }
                else
                {
                    if (subitem.ItemType == 5)// ignore 5 because that's another etherCAT terminal
                    {
                        //parrent.TerminalName = subitem.Name;
                        return;
                    }
                    

                    XmlDocument xmlDoc = new XmlDocument();
                    xmlDoc.LoadXml(subitem.ProduceXml(false));
                    IO_ObjectSettings parrent = new IO_ObjectSettings();
                    if (xmlDoc.SelectSingleNode("TreeItem/ItemSubType") != null)
                    {

                        parrent.PathName = subitem.PathName;
                        //Parrent.ItemSubType = 0;
                        parrent.TagParentName = subitem.ItemSubTypeName;
                        //Parrent.TypeFound = false;

                        parrent.ItemSubType = Convert.ToInt32(xmlDoc.SelectSingleNode("TreeItem/ItemSubType").InnerText);
                        if (parrent.ItemSubType == 1 || parrent.ItemSubType == 2 || parrent.ItemSubType == 3)
                        {
                            parrent.IsOutput = parrent.ItemSubType == 2;
                            parrent.IsInput = parrent.ItemSubType == 1 || parrent.ItemSubType == 3;
                            parrent.TypeFound = true;
                        }
                        else
                            parrent = Parrent;
                    }
                    else
                        parrent = Parrent;

                    GetIOObjectRecursive(worker, subitem, list, parrent);
                }
            }
        }
        static public void GetIOObject(IWorker worker, ITcSmTreeItem EtherCATMaster, List<IO_Object> IoList, int i)
        {
            //int i = 1;
            List<IO_Object> FullListOfIOObjects = new List<IO_Object>();
            ITcSmTreeItem EtherCATDevice = EtherCATMaster.Child[i];
            GlobalVariables.IOListNames.Add(EtherCATDevice.Name);

            XmlDocument EtherCATChilds = new XmlDocument(); //Convert the EtherCAT master childs into XML documents for parsing
            EtherCATChilds.LoadXml(EtherCATDevice.ProduceXml(false));//Convert the EtherCAT master childs into XML documents for parsing 
            //Find if device is disabled
            if (EtherCATChilds.SelectNodes("TreeItem/Disabled") != null && !CSV_Reader.DoNotIgnoreDisabledEtherCATDevices)
            {
                if (EtherCATChilds.SelectNodes("TreeItem/Disabled").Count > 0)
                    if (EtherCATChilds.SelectNodes("TreeItem/Disabled").Item(0).InnerText == "true")
                        return;
            }
            if (EtherCATDevice.ItemSubTypeName == "EL6652-0010 EtherNet/IP Adapter (Slave)" || CSV_Reader.IgnoreList.Exists(a => a.Type == EtherCATDevice.ItemSubTypeName))
                return;
            if (CSV_Reader.IgnoreList.Exists(a => a.Name == EtherCATDevice.Name))
                return;

            GetIOObjectRecursive(worker, EtherCATDevice, FullListOfIOObjects, new IO_ObjectSettings());
            //foreach (ITcSmTreeItem SubItem in EtherCATDevice) //This foreach is just to strip the first object out
            //{
            //    GetIOObjectRecursive(worker, SubItem, FullListOfIOObjects, new IO_ObjectSettings());
            //}

            foreach (IO_Object item in FullListOfIOObjects)
            {
   
                if (item.ItemSubType == 3) //ignore most status bits
                {
                    if (item.TagName == "WcState")
                    {
                        if (!CSV_Reader.AddAllWcStatesToEIP)
                            continue;
                    }
                    else if (item.TagName == "State")
                    {
                        if (!CSV_Reader.AddAllStatesToEIP)
                            continue;
                    }
                    else
                        continue;
                }
                    if (item.ItemSubType == 1 || item.ItemSubType == 2 || item.ItemSubType == 3)
                {
                    //string[] PathNameSplit = item.PathName.Split('^');
                    //item.item.Parent
                    List<string> RebuiltName = new List<string>();
                    ITcSmTreeItem searchitem = item.item;
                    while (true)
                    {

                        if (searchitem.ItemType == 8 && item.ItemSubType == 3) //we want to skip infodata and WcState
                        {
                            ;
                        }
                        else if (searchitem.ItemType == 7 && searchitem.ChildCount > 0) //if has childern ignore
                        {
                            ;
                        }
                        //else if (searchitem.ItemType == 8 && searchitem.ChildCount == 0) //this gets ride of the stupid IO link thing
                        //{
                        //}
                        else
                        {
                            if (!(searchitem.ItemType == 7 && searchitem.ChildCount > 0))
                                RebuiltName.Add(searchitem.Name);
                        }
                        if (searchitem.ItemType == 5)
                            break;
                        if (searchitem.ItemType != 7 && searchitem.ItemType != 8 && searchitem.ItemType != 60)
                            break;
                        searchitem = searchitem.Parent;
                    }
                    item.TagName = "";
                    for(int x = 0; x < RebuiltName.Count; x++)
                    {
                        //if(RebuiltName.Count > 3)
                        //{
                        //    if (x == 2)//Special case, skip this one
                        //        continue;
                        //}
                        string rebuiltnameComplete = RebuiltName[x];
                        item.TagName = rebuiltnameComplete + "_" + item.TagName;
                    }
                    item.TagName = item.TagName.TrimEnd('_');
                    //item.TagName = item.TerminalName + "_" + item.TagName;
                    item.TagParentName = EtherCATMaster.Child[i].Name.ToString();

                    IoList.Add(item);
                }
                
            }

            /*
            if (CSV_Reader.AddAllWcStatesToEIP)
            {

                IO_Object WcStateOjbect = FullListOfIOObjects.Find(x => x.TagName == "WcState");

                if (WcStateOjbect != null)
                {
                    string[] split1 = WcStateOjbect.PathName.Split('^');
                    string[] split2 = EtherCATDevice.PathName.Split('^');
                    if (split1.Length == split2.Length + 2)
                    {
                        IO_Object NewItem = new IO_Object();
                        NewItem.IsOutput = false;
                        NewItem.IsInput = true;
                        NewItem.PathName = WcStateOjbect.PathName;
                        NewItem.TagName = WcStateOjbect.TagName;
                        NewItem.Description = WcStateOjbect.Description;
                        //NewItem.TagName = NewItem.TagName.Replace(" ", "_");
                        NewItem.TagParentName = EtherCATMaster.Child[i].Name.ToString();
                        NewItem.bitsize = WcStateOjbect.bitsize;
                        NewItem.type = WcStateOjbect.type;
                        NewItem.typedetails = WcStateOjbect.typedetails;
                        IoList.Add(NewItem);
                    }
                }
            }
            if (CSV_Reader.AddAllStatesToEIP)
            {
                IO_Object WcStateOjbect = FullListOfIOObjects.Find(x => x.TagName == "State");
                if (WcStateOjbect != null)
                {
                    string[] split1 = WcStateOjbect.PathName.Split('^');
                    string[] split2 = EtherCATDevice.PathName.Split('^');
                    if (split1.Length == split2.Length + 2)
                    {
                        IO_Object NewItem = new IO_Object();
                        NewItem.IsOutput = false;
                        NewItem.IsInput = true;
                        NewItem.PathName = WcStateOjbect.PathName;
                        NewItem.TagName = WcStateOjbect.TagName;
                        NewItem.Description = WcStateOjbect.Description;
                        //NewItem.TagName = NewItem.TagName.Replace(" ", "_");
                        NewItem.TagParentName = EtherCATMaster.Child[i].Name.ToString();
                        NewItem.bitsize = WcStateOjbect.bitsize;
                        NewItem.type = WcStateOjbect.type;
                        NewItem.typedetails = WcStateOjbect.typedetails;
                        IoList.Add(NewItem);
                    }
                }
            }
            */



    
            
        }
        public class IO_Object
        {
            public int type;
            public string PathName;
            public string typedetails;
            public string TagName;
            public string TagParentName;
            public bool IsInput = false;
            public bool IsOutput = false;
            public string IndexGroup;
            public string IndexOffset;
            public int bitsize;
            public string Description;
            public int ItemSubType = 0;
            public string TerminalName = "";
            public ITcSmTreeItem item;
        }
        public class IO_ObjectSettings
        {
            public bool TypeFound = false;//Set to true to indicate the input or output type of the parrent is found
            public int ItemSubType = 0;
            public string PathName = "";
            public string TagName = "";
            public string TagParentName = "";
            public string TerminalName = ""; //Name of terminal in tree If ItemType == 5
            public bool IsInput = false;
            public bool IsOutput = false;
            
        }

    }
}
