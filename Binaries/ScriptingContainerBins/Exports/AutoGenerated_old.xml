<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.13.21" creationDateTime="2022-05-13T11:55:32.1321096" />
  <contentHeader name="Untitled1" modificationDateTime="2022-05-13T11:55:32.1331093">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="AutoGenerated" pouType="program">
        <interface>
          <localVars>
            <variable name="Step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="StepReadEtherCATDiagnostics">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="TonReadDiagnostics">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="sError">
              <type>
                <string />
              </type>
            </variable>
            <variable name="FB_EcCoESdoWrite1">
              <type>
                <derived name="FB_EcCoESdoWrite" />
              </type>
            </variable>
            <variable name="CoEWriteBuffer">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="FB_EcMasterFrameStatisticClearTxRxErr">
              <type>
                <derived name="FB_EcMasterFrameStatisticClearTxRxErr" />
              </type>
            </variable>
            <variable name="FB_EcGetAllSlavePresentStateChanges">
              <type>
                <derived name="FB_EcGetAllSlavePresentStateChanges" />
              </type>
            </variable>
            <variable name="fbGetAllSlaveStates">
              <type>
                <derived name="FB_EcGetAllSlaveStates" />
              </type>
            </variable>
            <variable name="fbEcGetConfSlaves">
              <type>
                <derived name="FB_EcGetConfSlaves" />
              </type>
            </variable>
            <variable name="fbEcGetAllSlaveCrcErrors">
              <type>
                <derived name="FB_EcGetAllSlaveCrcErrors" />
              </type>
            </variable>
            <variable name="stSlaveStates">
              <type>
                <array>
                  <dimension lower="0" upper="dwMaxSlaves" />
                  <baseType>
                    <derived name="ST_EcSlaveState" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="stArrEcConfSlaveInfo">
              <type>
                <array>
                  <dimension lower="0" upper="dwMaxSlaves" />
                  <baseType>
                    <derived name="ST_EcSlaveConfigData" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="dwArrSlaveCrcCount">
              <type>
                <array>
                  <dimension lower="0" upper="dwMaxSlaves" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="dwArrSlaveChangeCount">
              <type>
                <array>
                  <dimension lower="0" upper="dwMaxSlaves" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="dwArrSlaveChangeCountHistory">
              <type>
                <array>
                  <dimension lower="0" upper="dwMaxSlaves" />
                  <baseType>
                    <DWORD />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="bExecuteFB_GetAdaptersInfo">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">/////// Set IP address//////////////</xhtml>
              </documentation>
            </variable>
            <variable name="NICCount">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="NicIndex">
              <type>
                <INT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="FB_GetAdaptersInfo">
              <type>
                <derived name="FB_GetAdaptersInfo" />
              </type>
            </variable>
            <variable name="fbDiagRegister">
              <type>
                <derived name="FB_IPCDiag_Register" />
              </type>
              <initialValue>
                <structValue>
                  <value member="sNetId">
                    <simpleValue value="''" />
                  </value>
                </structValue>
              </initialValue>
            </variable>
            <variable name="fbWriteNicInfo">
              <type>
                <derived name="FB_IPCDiag_WriteParameter" />
              </type>
            </variable>
            <variable name="iPrevState">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="iState">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="_usiModuleIndex">
              <type>
                <USINT />
              </type>
            </variable>
            <variable name="_sIPAddress">
              <type>
                <string />
              </type>
            </variable>
            <variable name="_sIPSubNetMask">
              <type>
                <string />
              </type>
            </variable>
            <variable name="_sIPGateway">
              <type>
                <string />
              </type>
            </variable>
            <variable name="_xDHCP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="rtExecuteTrig">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="xBusy">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="xError">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="hrErrorCode">
              <type>
                <derived name="HRESULT" />
              </type>
            </variable>
            <variable name="xExecute">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="usiModuleIndex">
              <type>
                <USINT />
              </type>
            </variable>
            <variable name="sIPAddress">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIPSubnetMask">
              <type>
                <string />
              </type>
            </variable>
            <variable name="sIPGateway">
              <type>
                <string />
              </type>
            </variable>
            <variable name="xDHCP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sCurrentNicName">
              <type>
                <string />
              </type>
            </variable>
            <variable name="FB_EcMasterFrameStatisticClearFrames">
              <type>
                <derived name="FB_EcMasterFrameStatisticClearFrames" />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="dwMaxSlaves">
              <type>
                <DWORD />
              </type>
              <initialValue>
                <simpleValue value="50" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">EtherCAT_Diagnostics();

SetIpAddress();


CASE Step OF
	0:
		//Not implimented yet.
	
	100:
		IF GVL_AutoGenerated.EtherCAT_CoEWriteExecute THEN
			Step:=Step+10;
		END_IF

		
	110:
	FB_EcCoESdoWrite1(
		sNetId:= , 
		nSlaveAddr:= , 
		nSubIndex:= , 
		nIndex:= , 
		pSrcBuf:= , 
		cbBufLen:= , 
		bExecute:= , 
		tTimeout:= , 
		bBusy=&gt; , 
		bError=&gt; , 
		nErrId=&gt; );
		
	120:
		GVL_AutoGenerated.EtherCAT_CoEWriteDone:=TRUE;
END_CASE

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="EtherCAT_Diagnostics" ObjectId="3bad4647-2226-4bb9-ba7b-c15aaaea4612">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <localVars>
                  <variable name="x">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF EtherCATChangeCountReset THEN
		FOR x :=0 TO dwMaxSlaves BY 1 DO
		dwArrSlaveChangeCountHistory[x]:=dwArrSlaveChangeCount[x];
	END_FOR
END_IF


CASE StepReadEtherCATDiagnostics OF
0:
	FB_EcGetAllSlavePresentStateChanges.bExecute:=FALSE;
	fbGetAllSlaveStates.bExecute:=FALSE;
	fbEcGetConfSlaves.bExecute:=FALSE;
	//fbEcGetAllSlaveCrcErrors.bError:=FALSE;
	TonReadDiagnostics(IN:=TRUE, PT:=T#1S);
	IF TonReadDiagnostics.q THEN
		TonReadDiagnostics(IN:=FALSE);
		StepReadEtherCATDiagnostics:=StepReadEtherCATDiagnostics+10;
		FB_EcGetAllSlavePresentStateChanges.bExecute:=TRUE;
		fbGetAllSlaveStates.bExecute:=TRUE;
		fbEcGetConfSlaves.bExecute:=TRUE;
		//fbEcGetAllSlaveCrcErrors.bError:=TRUE;
	END_IF

10:
	IF NOT FB_EcGetAllSlavePresentStateChanges.bBusy THEN
		StepReadEtherCATDiagnostics:=StepReadEtherCATDiagnostics+10;
		IF NOT FB_EcGetAllSlavePresentStateChanges.bError THEN		
			;
		ELSE
			sError:='fbEcGetAllSlaveAbnormalStateChanges';
		END_IF
	END_IF
	
20:
	IF NOT fbGetAllSlaveStates.bBusy THEN
		StepReadEtherCATDiagnostics:=StepReadEtherCATDiagnostics+10;
		IF fbGetAllSlaveStates.bError THEN
			sError:='fbGetAllSlaveStates';
		END_IF
	END_IF
	
30:
	IF NOT fbEcGetConfSlaves.bBusy THEN
		StepReadEtherCATDiagnostics:=StepReadEtherCATDiagnostics+10;
		IF fbEcGetConfSlaves.bError THEN
			sError:='fbEcGetConfSlaves';
		END_IF
	END_IF
	
40:
	IF NOT fbEcGetAllSlaveCrcErrors.bBusy THEN
		StepReadEtherCATDiagnostics:=StepReadEtherCATDiagnostics+10;
		IF fbEcGetAllSlaveCrcErrors.bError THEN			
			sError:='fbEcGetAllSlaveCrcErrors';
		END_IF
	END_IF
	
50:	//Use this step to copy all the values to PDO to be sent to the EIP network
	StepReadEtherCATDiagnostics:=0;
	FOR x :=1 TO 50 BY 1 DO
	GVL_AutoGenerated.EtherCATChangeCount[x]:=DWORD_TO_UINT(dwArrSlaveChangeCount[x] - dwArrSlaveChangeCountHistory[x]);
	END_FOR
END_CASE


FB_EcCoESdoWrite1(
	sNetId:= F_CreateAmsNetId(nIds := GVL_AutoGenerated.EtherCAT_NetId) , 
	nSlaveAddr:=GVL_AutoGenerated.EtherCAT_CoEWriteSlaveAddr , 
	nSubIndex:=GVL_AutoGenerated.EtherCAT_CoEWriteSubIndex , 
	nIndex:= GVL_AutoGenerated.EtherCAT_CoEWriteIndex, 
	pSrcBuf:=ADR(CoEWriteBuffer) , 
	cbBufLen:=SIZEOF(CoEWriteBuffer) , 
	bBusy=&gt; , 
	bError=&gt;GVL_AutoGenerated.EtherCAT_CoEWriteError , 
	nErrId=&gt; );

	
FB_EcGetAllSlavePresentStateChanges(
	sNetId:= F_CreateAmsNetId(nIds := GVL_AutoGenerated.EtherCAT_NetId), 
	pAddrBuf:= ADR(dwArrSlaveChangeCount), 
	cbBufLen:= SIZEOF(dwArrSlaveChangeCount), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=&gt; , 
	bError=&gt; , 
	nErrId=&gt; , 
	nSlaves=&gt; );

fbGetAllSlaveStates(
	sNetId		:=  F_CreateAmsNetId(nIds := GVL_AutoGenerated.EtherCAT_NetId),
	pStateBuf	:= ADR(stSlaveStates),
	cbBufLen	:= SIZEOF(stSlaveStates),
	//bExecute	:=TRUE ,
	tTimeout	:= T#2s);

fbEcGetConfSlaves(bExecute:=FALSE);
fbEcGetConfSlaves(
	sNetId:=F_CreateAmsNetId(nIds := GVL_AutoGenerated.EtherCAT_NetId),
	pArrEcConfSlaveInfo:=ADR(stArrEcConfSlaveInfo) ,
	cbBufLen:=SIZEOF(stArrEcConfSlaveInfo) ,
	//bExecute:=TRUE ,
	tTimeout:=T#2s  );

fbEcGetAllSlaveCrcErrors(bExecute:=FALSE);
fbEcGetAllSlaveCrcErrors(
	sNetId:=F_CreateAmsNetId(nIds := GVL_AutoGenerated.EtherCAT_NetId) ,
	pCrcErrorBuf:=ADR(dwArrSlaveCrcCount) ,
	cbBufLen:=SIZEOF(dwArrSlaveCrcCount) ,
	//bExecute:=TRUE 
);
	</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetIpAddress" ObjectId="a08ff5c2-3a96-4183-8c84-3797ef299fe8">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">rtExecuteTrig(clk:= xExecute);
usiModuleIndex;
//sIPAddress:=GVL_Constants_AutoGenerated.PLCIPAddress;
//sIPSubnetMask:='255.255.255.0';
//xDHCP:=false;
//sIPAddress := PLCIPAddress001;

FB_GetAdaptersInfo.arrAdapters[0].bDhcpEnabled;
FB_GetAdaptersInfo.arrAdapters[1].bDhcpEnabled;
FB_GetAdaptersInfo.arrAdapters[0].sIpAddr;
FB_GetAdaptersInfo.arrAdapters[1].sIpAddr;
FB_GetAdaptersInfo.arrAdapters[1].physAddr;



FB_GetAdaptersInfo(
	sNetID:= , 
	bExecute:=bExecuteFB_GetAdaptersInfo , 
	tTimeout:= , 
	bBusy=&gt; , 
	bError=&gt; , 
	nErrID=&gt; , 
	arrAdapters=&gt; , 
	nCount=&gt; , 
	nGet=&gt; );

CASE iState OF
	0:	// Init
		IF NOT fbDiagRegister.bBusy THEN
			fbDiagRegister(bExecute:=TRUE); // need to be executed once
		ELSE
			fbDiagRegister(bExecute:=FALSE);
		END_IF
		IF NOT fbDiagRegister.bBusy AND NOT FB_GetAdaptersInfo.bBusy THEN
			iPrevState:= iState;
			iState := SEL(fbDiagRegister.bError, 1, 99);
			bExecuteFB_GetAdaptersInfo:=FALSE;
		END_IF
		
	1:	// Wait for execute
		IF NicIndex &lt;= NICCount THEN
			iPrevState:= iState;
			iState:= iState+1;
			usiModuleIndex := INT_TO_USINT(NicIndex);
			sCurrentNicName := FB_GetAdaptersInfo.arrAdapters[NicIndex-1].sDescription;
			IF NicIndex = 1 THEN		
				//usiModuleIndex:=1;
				IF PLCIPAddress001 = 'DHCP' THEN
					xDHCP:=TRUE;
				ELSE
					sIPSubnetMask:='255.255.255.0';
					xDHCP:=FALSE;
					sIPAddress := PLCIPAddress001;
				END_IF
			END_IF
			IF NicIndex = 2 THEN
				//usiModuleIndex:=0;
				IF PLCIPAddress000 = 'DHCP' THEN
					xDHCP:=TRUE;
				ELSE
					sIPSubnetMask:='255.255.255.0';
					xDHCP:=FALSE;
					sIPAddress := PLCIPAddress000;
				END_IF		
			END_IF
		END_IF
	
	2:
	
		fbWriteNicInfo(bExecute:= FALSE, fbRegister:= fbDiagRegister);
		hrErrorCode:= 0;
		xBusy:= TRUE;
		xError:= FALSE;
		IF usiModuleIndex &gt; 0 
			AND (xDHCP OR (sIPAddress &lt;&gt; '' AND sIPSubnetMask &lt;&gt; '')) THEN
				_usiModuleIndex:= usiModuleIndex;
				_sIPAddress:= sIPAddress;
				_sIPSubNetMask:= sIPSubnetMask;
				_sIPGateway:= sIPGateway;
				_xDHCP:= xDHCP;
				iPrevState:= iState;
				iState:= 20;					
		ELSE
			iPrevState:= iState;
			iState:= 99;	
		END_IF				


		
	20:	// Write DHCP
		fbWriteNicInfo(
			bExecute:= TRUE, 
			eParameterKey:= E_IPCDiag_ParameterKey.NIC_DHCP, 
			pBuffer:= ADR(_xDHCP), 
			nBufferSize:= SIZEOF(_xDHCP), 
			nModuleIdx:= _usiModuleIndex, 
			nListIdx:= , 
			tTimeout:= T#5S, 
			sNetId:= '', 
			xReserved:= , 
			fbRegister:= fbDiagRegister, 
			bBusy=&gt; , 
			bError=&gt; , 
			hrErrorCode=&gt; , 
			ipErrorMessage=&gt; );
	
		IF NOT fbWriteNicInfo.bBusy THEN
			IF NOT fbWriteNicInfo.bError THEN
				fbWriteNicInfo(bExecute:= FALSE, fbRegister:= fbDiagRegister);
				iPrevState:= iState;
				iState:= iState + 10;
				IF _xDHCP THEN
					iState:= 60;
				END_IF
			ELSE
				iPrevState:= iState;
				iState:= 99;
			END_IF
		END_IF
		
	30: // Write IP Address
		fbWriteNicInfo(
			bExecute:= TRUE, 
			eParameterKey:= E_IPCDiag_ParameterKey.NIC_IPv4Address, 
			pBuffer:= ADR(_sIPAddress), 
			nBufferSize:= SIZEOF(_sIPAddress), 
			nModuleIdx:= _usiModuleIndex, 
			nListIdx:= , 
			tTimeout:= T#5S, 
			sNetId:= '', 
			xReserved:= , 
			fbRegister:= fbDiagRegister, 
			bBusy=&gt; , 
			bError=&gt; , 
			hrErrorCode=&gt; , 
			ipErrorMessage=&gt; );
	
		IF NOT fbWriteNicInfo.bBusy THEN
			IF NOT fbWriteNicInfo.bError THEN
				fbWriteNicInfo(bExecute:= FALSE, fbRegister:= fbDiagRegister);
				iPrevState:= iState;
				iState:= iState + 10;
			ELSE
				iPrevState:= iState;
				iState:= 99;
			END_IF
		END_IF	
	
	40:	// Write Subnet Mask
		fbWriteNicInfo(
			bExecute:= TRUE, 
			eParameterKey:= E_IPCDiag_ParameterKey.NIC_IPv4SubnetMask, 
			pBuffer:= ADR(_sIPSubNetMask), 
			nBufferSize:= SIZEOF(_sIPSubNetMask), 
			nModuleIdx:= _usiModuleIndex, 
			nListIdx:= , 
			tTimeout:= T#5S, 
			sNetId:= '', 
			xReserved:= , 
			fbRegister:= fbDiagRegister, 
			bBusy=&gt; , 
			bError=&gt; , 
			hrErrorCode=&gt; , 
			ipErrorMessage=&gt; );
	
		IF NOT fbWriteNicInfo.bBusy THEN
			IF NOT fbWriteNicInfo.bError THEN
				fbWriteNicInfo(bExecute:= FALSE, fbRegister:= fbDiagRegister);
				iPrevState:= iState;
				iState:= iState + 10;
			ELSE
				iPrevState:= iState;
				iState:= 99;
			END_IF
		END_IF		
	
	50:	// Write Gateway
		fbWriteNicInfo(
			bExecute:= TRUE, 
			eParameterKey:= E_IPCDiag_ParameterKey.NIC_IPv4DefGateway, 
			pBuffer:= ADR(_sIPGateway), 
			nBufferSize:= SIZEOF(_sIPGateway), 
			nModuleIdx:= _usiModuleIndex, 
			nListIdx:= , 
			tTimeout:= T#5S, 
			sNetId:= '', 
			xReserved:= , 
			fbRegister:= fbDiagRegister, 
			bBusy=&gt; , 
			bError=&gt; , 
			hrErrorCode=&gt; , 
			ipErrorMessage=&gt; );
	
		IF NOT fbWriteNicInfo.bBusy THEN
			IF NOT fbWriteNicInfo.bError THEN
				fbWriteNicInfo(bExecute:= FALSE, fbRegister:= fbDiagRegister);
				iPrevState:= iState;
				iState:= iState + 10;
			ELSE
				iPrevState:= iState;
				iState:= 99;
			END_IF
		END_IF		
		
	60:
		xBusy:= FALSE;
		xError:= FALSE;
		iPrevState:= iState;
		iState:= 0;
		NicIndex:=NicIndex+1;
		bExecuteFB_GetAdaptersInfo:=TRUE;
	
	99:
		xBusy:= FALSE;
		xError:= TRUE;
		hrErrorCode:= fbWriteNicInfo.hrErrorCode;
		IF NOT xExecute THEN
			iPrevState:= iState;
			iState:= 0;
		END_IF
	
END_CASE
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6dc4e52a-6f07-4be2-8eab-70a9b737d600</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="AutoGenerated" ObjectId="6dc4e52a-6f07-4be2-8eab-70a9b737d600">
          <Object Name="EtherCAT_Diagnostics" ObjectId="3bad4647-2226-4bb9-ba7b-c15aaaea4612" />
          <Object Name="SetIpAddress" ObjectId="a08ff5c2-3a96-4183-8c84-3797ef299fe8" />
        </Object>
      </ProjectStructure>
    </data>
  </addData>
</project>